; Jonathan Zoccola - Assignment 3 PL
#lang typed/racket
(require typed/rackunit)

; defined syntax for tstruct, eliminates the need
; to put #:transparent at the end of every struct.
(define-syntax tstruct
    (syntax-rules ()
      [(_ name fields)
       (struct name fields #:transparent)]))

(provide tstruct)

; -- ZODE3 Language --

(tstruct FunDefC ([name : Symbol] [args : (Listof Symbol)] [body : ExprC]))

(define-type ExprC (U NumC BinOpC ifleq0? AppC))
(tstruct NumC ([n : Real]))
(tstruct AppC  ([fun : Symbol] [args : (Listof ExprC)]))
(tstruct BinOpC ([op : Symbol] [l : ExprC] [r : ExprC]))
(tstruct ifleq0? ([guard : ExprC] [then : ExprC] [else : ExprC]))


; Syntax for the ZODE3 Language in EBNF Notation:

;;   EXPR	 =	        num
;;  	 	|	 	{+ EXPR EXPR}
;;  	 	|	 	{- EXPR EXPR}
;;  	 	|	 	{* EXPR EXPR}
;;  	 	|	 	{/ EXPR EXPR}
;;  	 	|	 	{id EXPR ...}
;;  	 	|	 	{ifleq0? : EXPR : EXPR : EXPR}
;;  	 	|	 	id
;;   DEFN	 =	        {def : id : id ... : EXPR}


; valid-binop takes in an operator and returns true if the operator
; is valid in the ZODE3 language and false otherwise
(define (valid-binop? [op : Sexp]) : Boolean
  (match op
    ['+ #t]
    ['- #t]
    ['* #t]
    ['/ #t]
    [else #f]))


; TODO: ----- Need to add prevention for division by zero -----


; -- Parser for ZODE3 --

; parse takes in an s-expression and returns an ExprC if the
; given s-expression can be transformed into one. Error otherwise.
(define (parse [sexp : Sexp]) : ExprC
  (match sexp
    [(? real? r) (NumC r)]
    [(list (? valid-binop? op) a b)
     (if (and (symbol? op) (valid-binop? op)) ; guard, (we also check in interp for division by zero and an invalid operator)
        (BinOpC op (parse a) (parse b)) ; then
        (error 'parse "ZODE : invalid binary operator, got ~e" op))] ; else
    [(list 'ifleq0? guard then else) (ifleq0? (parse guard) (parse then) (parse else))]
    [(list (? symbol? fname) args ...)
     (AppC fname (map parse args))]
    [else (error 'parse "ZODE : expected s-expression, got ~e" sexp)]))


; Test Cases for parse
(check-equal? (parse '(myfunc)) (AppC 'myfunc '()))
(check-equal? (parse '(myfunc 42)) (AppC 'myfunc (list (NumC 42))))
(check-equal? (parse '(myfunc 42 3)) (AppC 'myfunc (list (NumC 42) (NumC 3))))

; -- Parser for fundef s-expressions --
(define (parse-fundef [sexp : Sexp]) : FunDefC
  (match sexp
    ['() (error 'parse-fundef "ZODE: Error")]
    [(list 'def (list (? symbol? fun)) (? list? args) body)
     (let ([symbol-params (ensure-symbol-list args)])  ; Ensure params are all symbols
       (FunDefC fun symbol-params (parse body)))]
[other (error 'parse-fundef "ZODE: You gave me a busted fundef ~e" other)]))

; Test cases for fundef
;(check-equal? (parse-fundef '(def (foo x y) (+ 5 3)))
;              (FunDefC 'foo '(x y) (BinOpC '+ (NumC 5) (NumC 3))))

; Hopefully fix the andmap thing
; Function to check if all elements in the list are symbols
(define (ensure-symbol-list [sexps : (Listof Sexp)]) : (Listof Symbol)
  (if (andmap symbol? sexps)
      (cast sexps (Listof Symbol))  ; Casts (Listof Sexp) to (Listof Symbol) if all are symbols
      (error "ZODE: All elements must be symbols")))


; interp takes in an ExprC and returns a Real
;; (define (interp [e : ExprC]) : Real
;;   (match e
;;     [(NumC n) n]
;;     [(BinOpC op a b)
;;        (match op
;;        ['+ (+ (interp a) (interp b))]
;;        ['- (- (interp a) (interp b))]
;;        ['* (* (interp a) (interp b))]
;;        ['/ (if (zero? (interp b)) ; guard
;;               (error 'interp "ZODE : unable to perform division by zero") ;then
;;               (/ (interp a) (interp b)))] ;else
;;        [other (error 'interp "ZODE : unknown operator")])]
;;     [(ifleq0? guard then else)
;;         (if (<= (interp guard) 0)
;;         (interp then)
;;         (interp else))]))


(define (interp [e : ExprC] [fds : (Listof FunDefC)]) : Real
  (match e
    [(NumC n) n]
    [(BinOpC op a b)
       (match op
       ['+ (+ (interp a fds) (interp b fds))]
       ['- (- (interp a fds) (interp b fds))]
       ['* (* (interp a fds) (interp b fds))]
       ['/ (if (zero? (interp b fds)) ; guard
              (error 'interp "ZODE : unable to perform division by zero") ;then
              (/ (interp a fds) (interp b fds)))] ;else
       [other (error 'interp "ZODE : unknown operator")])]
    [(ifleq0? guard then else)
        (if (<= (interp guard fds) 0)
        (interp then fds)
        (interp else fds))]
    [(AppC f a)
         (let ([fd (get-fundef f fds)])
                (interp (multi-subst a (FunDefC-args fd) (FunDefC-body fd)) fds)
                (error 'interp "ZODE: more than 1"))]))  ; Error if more than 1


; (tstruct FunDefC ([name : Symbol] [arg : (Listof Symbol)] [body : ExprC]))
; Interp-fns takes in a list of FunDefC and returns a Real
(define (interp-fns [func : (Listof FunDefC)]) : Real
  (match func
      [(FunDefC name args body)
       (if (= 1 (length args))
           (interp body args)
       (error 'interp-fns "ZODE : More than 1 args"))]))

;(interp (map (lambda([arg : Symbol]) (multi-subst a arg (FunDefC-body fd))) (FunDefC-args fd)) fds))
; multi subst, walk through the list and perform on the body, recursively call subst
; Takes in a list of ExprC, recursively calls subst 
(define (multi-subst [lst : (Listof ExprC)] [for : (Listof Symbol)] [in : ExprC]): ExprC
  (if (null? for)
      in
      (let* ([arg (first lst)]
             [param (first for)]
             [rest-arg (rest lst)]
             [rest-params (rest for)])
        (subst arg param (multi-subst rest-arg rest-params in))))

  )


;;   (match lst
;;     ['() in]; If an empty list return empty 
;;     [(cons first rest)
;;      (subst first for in) (multi-subst rest for in)])
; subst takes in an ExprC, a Symbol, and another ExprC and returns an ExprC.
(define (subst [what : ExprC] [for : Symbol] [in : ExprC]) : ExprC
  (match in
    [(NumC n) in]
    [(AppC f args) (AppC f (map (lambda ([a : ExprC]) (subst what for a)) args))]))

; list of FunDefC and returns the FunDefC that matches n
(define (get-fundef [n : Symbol] [fds : (Listof FunDefC)]) : FunDefC
  (cond
    [(empty? fds)
     (error 'get-fundef "ZODE : reference to undefined function")]
    [(cons? fds)
     (cond
       [(equal? n (FunDefC-name (first fds))) (first fds)]
       [else (get-fundef n (rest fds))])]))



; top-interp takes in an s-expression and calls the parser and interp
(: top-interp (Sexp -> Real))
(define (top-interp fun-sexps)
  (interp-fns (parse-prog fun-sexps)))

; Parse a list of fundefs
(define (parse-prog [sexp : Sexp]) : (Listof FunDefC)
  (match sexp
    ['() '()]
    [(cons f r) (cons (parse-fundef f) (parse-prog r))]))
 

; --------- test-cases for all functions -----------

; test-cases for valid-binop:
(check-equal? (valid-binop? '+) #t)
(check-equal? (valid-binop? '-) #t)
(check-equal? (valid-binop? '*) #t)
(check-equal? (valid-binop? '/) #t)
(check-equal? (valid-binop? 'a) #f)
(check-equal? (valid-binop? '//) #f)


; test-cases for parse:
(check-equal? (parse 5) (NumC 5))
(check-equal? (parse '(+ 6 5)) (BinOpC '+ (NumC 6) (NumC 5)))
(check-equal? (parse '(ifleq0? 4 5 6)) (ifleq0? (NumC 4) (NumC 5) (NumC 6)))
(check-exn (regexp (regexp-quote "ZODE : expected s-expression"))
           (lambda () (parse 'a)))
(check-exn (regexp (regexp-quote " ZODE : expected s-expression, got '(4 5 6)"))
           (lambda () (parse '(4 5 6))))

; fundefList is a variable with a list of fundef's so we can
; pass in a list of fundef's into our functions for test cases easily
(define fundefList (list (FunDefC 'foo (list 'a 'b 'c) (NumC 4))
                     (FunDefC 'throw_ball (list 'a 'b 'c) (BinOpC '+ (NumC 5) (NumC 8)))))


; test-cases for interp:
(check-equal? (interp (NumC 4) fundefList) 4)
(check-equal? (interp (BinOpC '+ (NumC 6) (NumC 4)) fundefList) 10)
(check-equal? (interp (BinOpC '- (NumC 6) (NumC 4)) fundefList) 2)
(check-equal? (interp (BinOpC '* (NumC 6) (NumC 4)) fundefList) 24)
(check-equal? (interp (BinOpC '/ (NumC 6) (NumC 3)) fundefList) 2)
(check-equal? (interp (BinOpC '/ (NumC 0) (NumC 3)) fundefList) 0)
(check-equal? (interp (ifleq0? (NumC 4) (NumC 1) (NumC 0)) fundefList) 0)
(check-equal? (interp (ifleq0? (NumC 0) (NumC 1) (NumC 0)) fundefList) 1)
(check-exn (regexp (regexp-quote "ZODE : unable"))
           (lambda () (interp (BinOpC '/ (NumC 6) (NumC 0)) fundefList)))
(check-exn (regexp (regexp-quote "ZODE : unknown operator"))
           (lambda () (interp (BinOpC '// (NumC 5) (NumC 5)) fundefList)))




